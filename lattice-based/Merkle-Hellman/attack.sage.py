

# This file was *autogenerated* from the file attack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16)
from sage.all import *
f = open("output.txt", "r")
pub_key = eval(f.readline().strip().replace("Public key : ", ""))
enc_key = int(f.readline().strip().replace("Encrypted AES key : ", ""))
from json import loads 
msg = loads(f.readline().strip())

n = len(pub_key)
def check_row(row):
    for i in row:
        if not (-_sage_const_1 /_sage_const_2 <= i <=_sage_const_1 /_sage_const_2 ):
            return False
    return True

def find_secret_key():
    ma = [[_sage_const_0  for i in range(n + _sage_const_1 )] for j in range(n + _sage_const_1 )]
    ma[_sage_const_0 ][_sage_const_0 ] = enc_key

    for i in range(n):
        ma[_sage_const_0 ][i + _sage_const_1 ] = -pub_key[i]
        ma[i + _sage_const_1 ][_sage_const_0 ] = -_sage_const_1 /_sage_const_2 
        ma[i + _sage_const_1 ][i + _sage_const_1 ] = _sage_const_1 
    ma = matrix(ma)
    newma = ma.transpose().LLL()
    ans = _sage_const_0 
    for row in newma:
        if row[_sage_const_0 ] == _sage_const_0 :
            if check_row(row[_sage_const_1 :]):
                for j in row[_sage_const_1 :][::-_sage_const_1 ]:
                    if j == -_sage_const_1 /_sage_const_2 :
                        ans = ans << _sage_const_1 
                    else:
                        ans = (ans << _sage_const_1 ) | _sage_const_1 
                return ans 
    return None

from Crypto.Util.number import long_to_bytes as ltb
from Crypto.Cipher import AES 
from Crypto.Util.Padding import unpad
from hashlib import sha256 
key = sha256(ltb(find_secret_key())).digest()[:_sage_const_16 ]
if key == None:
    print("Cannot recover secret key!!!")
else:
    iv = bytes.fromhex(msg["iv"])
    enc = bytes.fromhex(msg["encrypted_message"])

    cipher = AES.new(key, AES.MODE_CBC, iv)
    print(unpad(cipher.decrypt(enc), _sage_const_16 ))

