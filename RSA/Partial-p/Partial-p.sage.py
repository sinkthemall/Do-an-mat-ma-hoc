

# This file was *autogenerated* from the file Partial-p.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_256 = Integer(256); _sage_const_0p4 = RealNumber('0.4'); _sage_const_1 = Integer(1); _sage_const_40 = Integer(40); _sage_const_0 = Integer(0)
f = open("output.txt", "r")
n = int(f.readline().strip().replace("n = ", ""))
e = int(f.readline().strip().replace("e = ", ""))
c = int(f.readline().strip().replace("c = ", ""))
truncate_p = int(f.readline().strip().replace("Truncated p = ", ""))

from Crypto.Util.number import long_to_bytes as ltb 
P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
f = Integer(truncate_p) + x * _sage_const_2  ** (_sage_const_512  + _sage_const_256 )
f = f.monic()
ans = f.small_roots(beta = _sage_const_0p4 , X = _sage_const_2 **_sage_const_256 , epsilon = _sage_const_1 /_sage_const_40 )
print(ans)
if len(ans) == _sage_const_0 :
    print("No solution found!!!")
else:
    print(int(ans[_sage_const_0 ]).bit_length())
    p = truncate_p + ans[_sage_const_0 ] * _sage_const_2  ** (_sage_const_512  + _sage_const_256 )
    print(f"Found possible p : {p}")
    assert(gcd(p, n) != _sage_const_1 ), "Not the right p!!!"
    q = n // int(p)
    d = pow(e, -_sage_const_1 , (p-_sage_const_1 )*(q-_sage_const_1 ))
    print("Message found : ")
    print(ltb(int(pow(int(c), int(d), n))))

